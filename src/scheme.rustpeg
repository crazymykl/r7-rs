use super::{LispValue, LispNum};

#[pub]
expression -> LispValue
  = number / boolean / atom / string / quoted / listForm

number -> LispValue
  = decimal / ratio

decimal -> LispValue
  = match_str:$([-+]? ((digit+ "." digit*) / ("." digit+))) {
    let parts = match_str.splitn(2, '.').collect::<Vec<_>>();
    let num = parts.concat().parse::<LispNum>().unwrap();
    let denom = if let Some(frac) = parts.get(1) {
      10u64.pow(frac.len() as u32)
    } else {
      1
    };
    let ratio = format!("{}/{}", num, denom);

    LispValue::Number(ratio.parse::<LispNum>().unwrap())
  }

ratio -> LispValue
  = match_str:$([-+]? digit+ ("/" digit+)?) {
    LispValue::Number(match_str.parse::<LispNum>().unwrap())
  }

boolean -> LispValue
  = true / false

true -> LispValue
  = "#" ("true" / "t") { LispValue::Boolean(true) }

false -> LispValue
  = "#" ("false" / "f") { LispValue::Boolean(false) }

atom -> LispValue
  = match_str:$((letter / symbol) (letter / digit / symbol / [.@])*) {
      LispValue::Atom(match_str.to_string())
  }

string -> LispValue
  = "\"" body:char* "\"" { LispValue::String(body.concat()) }

quoted -> LispValue
  = "'" expr:expression { LispValue::quote(expr) }

listForm -> LispValue
  = "(" whitespace* value:(dottedList / list) whitespace* ")" { value }

list -> LispValue
  = exprs:listBody { LispValue::List(exprs) }

dottedList -> LispValue
  = head:listBody dot tail:expression { LispValue::DottedList(head, Box::new(tail)) }

dot = whitespace+ "." whitespace+

listBody -> Vec<LispValue>
  = expression ** (whitespace+)

char -> String
  = match_str:$(escapeSequence / [^"]) { match_str.to_string() }

escapeSequence -> String
  = match_str:$("\\" ["\/bntrf]) {
      match match_str {
          "\\\"" => "\"",
          "\\\\" => "\\",
          "\\/"  => "/",
          "\\b"  => "\x08",
          "\\n"  => "\n",
          "\\t"  => "\t",
          "\\r"  => "\r",
          "\\f"  => "\x0c",
          _      => match_str,
      }.to_string()
  }

whitespace = [\n\r ]

letter = [a-zA-Z]

digit = [0-9]

symbol = [!#$%&|*+\-/:<=>?@^_~]

#[pub]
completeInput = whitespace* "'"? ((balancedParens .*) / [^()]*)

balancedParens = "(" (("\"" ("\\\"" / [^"])* "\"") / balancedParens / [^)])* ")"
